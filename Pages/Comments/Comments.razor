@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Text.Json.Serialization;
@using Tracker.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject IHttpClientFactory ClientFactory
@inject Tracker.Data.ApplicationDbContext context

<h3>Comments</h3>

<form>
	<input @bind="@CommentContent" class="form-control" />
	<div class="form-group">
		<input type="submit" value="Add Comment" class="btn btn-primary" @onclick="AddComment" />
	</div>
</form>

@if (CommentList == null)
{
	<div style="text-align: center;">
		<h3 style="font-size: 20px; font-weight: 600; color: #333;">Loading...</h3>
	</div>
}
else
{
	<section>
		@foreach (var comment in CommentList)
		{
			<div>
				<h5>@comment.AuthorUsername</h5>
				<p>@comment.Content</p>
			</div>
		}
	</section>
}


@code {
	[Parameter]
	public int TicketId { get; set; }

	public IList<CommentDto>? CommentList { get; set; }

	public string CommentContent { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var client = ClientFactory.CreateClient();

		client.BaseAddress = new Uri("https://localhost:7004/");

		CommentList = await client.GetFromJsonAsync<IList<CommentDto>>($"api/Tickets/{TicketId}/Comments");
	}

	public async Task AddComment()
	{
		if (string.IsNullOrEmpty(CommentContent))
		{
			Console.WriteLine("Error 1");
			return;
		}

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (!user.Identity.IsAuthenticated)
		{
			Console.WriteLine("Error 2");
			return;
		}

		CommentDto Comment = new CommentDto();

		Comment.AuthorId = userManager.GetUserId(user);
		Comment.AuthorUsername = userManager.GetUserName(user);
		Comment.TicketId = TicketId;
		Comment.Content = CommentContent;
		Comment.Created = DateTime.Now;

		var client = ClientFactory.CreateClient();

		StateHasChanged();
		client.BaseAddress = new Uri("https://localhost:7004/");

		await Task.Run(async () =>
		{
			var response = await client.PostAsJsonAsync($"api/Tickets/{TicketId}/Comments", Comment);

			if (!response.IsSuccessStatusCode)
			{
				Console.WriteLine("Error 3");
				return;
			}

			CommentList = JsonSerializer.Deserialize<IList<CommentDto>>(response.Content.ReadAsStringAsync().Result);
			StateHasChanged();
		});

	}

}
